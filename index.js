// Generated by CoffeeScript 1.7.1
(function() {
  var chg, exports, finish, patcher, reduce, walkDiff,
    __slice = [].slice;

  patcher = require('patcher');

  reduce = require('stream-reduce');

  exports = module.exports = function(opts) {
    var compile, computeBatch, computePatch, convertPatch;
    if (opts == null) {
      opts = {};
    }
    opts.separator || (opts.separator = '\xff');
    opts.depth || (opts.depth = 0);
    computePatch = patcher.computePatch;
    convertPatch = function(patch) {
      var batch;
      batch = [];
      walkDiff(batch, patch, [], opts);
      return batch;
    };
    computeBatch = function(prev, next) {
      var patch;
      patch = computePatch(prev, next);
      return convertPatch(patch);
    };
    compile = function(cb) {
      var reducer, stream;
      if (cb == null) {
        cb = function() {};
      }
      reducer = function(acc, h) {
        var fix, id, obj, prefix, _i, _j, _len, _ref;
        _ref = h.key.split(opts.separator), prefix = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), id = _ref[_i++];
        obj = acc;
        for (_j = 0, _len = prefix.length; _j < _len; _j++) {
          fix = prefix[_j];
          obj[fix] || (obj[fix] = {});
          obj = obj[fix];
        }
        obj[id] = h.value;
        return acc;
      };
      stream = reduce(reducer, {});
      stream.on('data', function(data) {
        return cb(null, data);
      });
      return stream.on('err', cb);
    };
    return {
      computeBatch: computeBatch,
      computePatch: computePatch,
      convertPatch: convertPatch,
      compile: compile,
      writeStream: compile,
      createWriteStream: compile
    };
  };

  walkDiff = function(batch, obj, path, opts) {
    var base, key, value;
    base = path;
    for (key in obj) {
      value = obj[key];
      path = base.slice(0);
      path.push(key);
      if (path.length - 1 >= opts.depth) {
        finish(batch, value, path, opts);
      } else {
        walkDiff(batch, value, path, opts);
      }
    }
    return null;
  };

  finish = function(batch, value, path, opts) {
    var type;
    if (path[path.length - 1] === '$r') {
      path.pop();
      path.push(value);
      type = 'del';
    } else {
      type = 'put';
    }
    return batch.push(chg(type, path.join(opts.separator), value));
  };

  chg = function(type, key, value) {
    var obj;
    obj = {
      type: type,
      key: key
    };
    if (value) {
      obj.value = value;
    }
    return obj;
  };

}).call(this);
