// Generated by CoffeeScript 1.7.1
(function() {
  var c1, c2, c3, c4, db, level, objectify, test;

  test = require('tape');

  level = require('level-test')();

  objectify = require('../');

  db = level('level-objectify-test', {
    valueEncoding: 'json'
  });

  c1 = {
    person: {
      gaius: {
        name: 'Gaius Baltar'
      },
      six: {
        name: 'Six'
      }
    }
  };

  c2 = {
    person: {
      gaius: {
        name: 'Gaius Baltar'
      },
      kara: {
        name: 'Kara Thrace'
      }
    }
  };

  c3 = {
    biped: {
      human: {
        gaius: {
          name: 'Gaius Baltar'
        },
        kara: {
          name: 'Kara Thrace'
        }
      },
      cylon: {
        six: {
          name: 'Six'
        }
      }
    }
  };

  c4 = {
    biped: {
      human: {
        gaius: {
          name: 'Gaius Baltar'
        }
      },
      cylon: {
        six: {
          name: 'Six'
        },
        boomer: {
          name: 'Boomer'
        }
      }
    }
  };

  test('identity', function(t) {
    var patch;
    patch = objectify({
      depth: 1
    }).computePatch({}, c1);
    t.same(patch, c1);
    return t.end();
  });

  test('batch', function(t) {
    var batch;
    batch = objectify({
      depth: 1
    }).convertPatch(c1);
    t.same(batch, [
      {
        key: 'personÿgaius',
        type: 'put',
        value: {
          name: 'Gaius Baltar'
        }
      }, {
        key: 'personÿsix',
        type: 'put',
        value: {
          name: 'Six'
        }
      }
    ]);
    return t.end();
  });

  test('fill', function(t) {
    var batch;
    batch = objectify({
      depth: 1
    }).convertPatch(c1);
    return db.batch(batch, function(err) {
      t.notOk(err);
      return t.end();
    });
  });

  test('compile stream', function(t) {
    return db.readStream().pipe(objectify({
      depth: 1
    }).compile(function(err, prev) {
      t.notOk(err);
      t.ok(prev);
      t.same(prev, c1);
      return t.end();
    }));
  });

  test('compute batch', function(t) {
    var batch;
    batch = objectify({
      depth: 1
    }).computeBatch(c1, c2);
    t.same(batch, [
      {
        key: 'personÿsix',
        type: 'del',
        value: 'six'
      }, {
        key: 'personÿkara',
        type: 'put',
        value: {
          name: 'Kara Thrace'
        }
      }
    ]);
    return t.end();
  });

  test('deeper key', function(t) {
    var batch;
    batch = objectify({
      depth: 2
    }).computeBatch({}, c3);
    t.same(batch, [
      {
        key: 'bipedÿhumanÿgaius',
        type: 'put',
        value: {
          name: 'Gaius Baltar'
        }
      }, {
        key: 'bipedÿhumanÿkara',
        type: 'put',
        value: {
          name: 'Kara Thrace'
        }
      }, {
        key: 'bipedÿcylonÿsix',
        type: 'put',
        value: {
          name: 'Six'
        }
      }
    ]);
    return t.end();
  });

  test('deeper key mod', function(t) {
    var batch;
    batch = objectify({
      depth: 2
    }).computeBatch(c3, c4);
    t.same(batch, [
      {
        key: 'bipedÿhumanÿkara',
        type: 'del',
        value: 'kara'
      }, {
        key: 'bipedÿcylonÿboomer',
        type: 'put',
        value: {
          name: 'Boomer'
        }
      }
    ]);
    return t.end();
  });

  test('save deeper key', function(t) {
    db = level('level-objectify-test2', {
      valueEncoding: 'json'
    });
    return db.batch(objectify({
      depth: 2
    }).computeBatch({}, c3), function(err) {
      t.notOk(err);
      return t.end();
    });
  });

  test('deeper key compile', function(t) {
    return db.readStream().pipe(objectify({
      depth: 2
    }).compile(function(err, data) {
      t.notOk(err);
      t.same(data, c3);
      return t.end();
    }));
  });

  test('zero depth', function(t) {
    var batch, batch1;
    batch = objectify({
      depth: 0
    }).computeBatch({}, c3);
    batch1 = objectify({
      depth: 1
    }).computeBatch({}, c3);
    t.notSame(batch, batch1);
    t.same(batch, [
      {
        key: 'biped',
        type: 'put',
        value: {
          cylon: {
            six: {
              name: 'Six'
            }
          },
          human: {
            gaius: {
              name: 'Gaius Baltar'
            },
            kara: {
              name: 'Kara Thrace'
            }
          }
        }
      }
    ]);
    return t.end();
  });

}).call(this);
